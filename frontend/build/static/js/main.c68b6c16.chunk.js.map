{"version":3,"sources":["pages/home_app.js","actions/index.js","controllers/index.js","pages/registro_app.js","pages/sala_app.js","routes/index.js","App.js","serviceWorker.js","reducer/mensajes.js","reducer/salas.js","store.js","reducer/usuario.js","index.js"],"names":["chat","crearUsuario","value","dispatch","type","IP_WS","ws","dev","HomeApp","useSelector","state","mensajes","usuario","useDispatch","useState","setValue","useEffect","initApp","room","user","WebSocket","onopen","console","log","onmessage","e","datos","JSON","parse","data","agregarMensajes","onclose","onerror","err","close","IconButton","onClick","ExitToAppRounded","onSubmit","send","stringify","message","preventDefault","TextField","onChange","target","variant","size","focused","Button","color","endIcon","Send","map","ms","id","key","estyles","makeStyles","theme","container","display","justifyContent","form","width","height","RegistroApp","clases","agregar","className","label","fullWidth","disabled","SalaApp","Routes","path","component","exact","to","App","Boolean","window","location","hostname","match","initialMensajes","initialSalas","reducers","combineReducers","action","salas","localStorage","setItem","removeItem","getItem","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c68b6c16.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { agregarMensajes, crearUsuario } from '../actions';\nimport { WS_CHAT_ROOM } from '../controllers';\nimport { Button, IconButton, TextField } from '@material-ui/core';\nimport {  ExitToAppRounded, Send } from '@material-ui/icons';\n\n\nlet chat;\n\nconst HomeApp = () => {\n    const { mensajes=[],usuario=null } = useSelector(state => state);\n    const dispatch = useDispatch();\n    const [value,setValue] = useState('');\n\n    //eslint-disable-next-line\n    useEffect(()=>initApp(),[]);\n\n    const initApp = () => {\n        chat = WS_CHAT_ROOM('home',usuario);\n        chat.onopen = ()=>{\n            console.log('conectado...');\n        }\n        chat.onmessage = e => {\n            const datos = JSON.parse( e.data);\n            console.log(mensajes,datos);\n\n            dispatch(agregarMensajes([...datos.mensajes]));\n            setValue('');\n        };\n        chat.onclose = () => console.log('cerrar conexion...');\n        chat.onerror = err => console.log('error...',err);\n\n        return ()=>chat.close()\n    }\n    const send = e =>{\n        chat.send(JSON.stringify({message:value,user:usuario}));\n        e.preventDefault();\n    }\n    const salir = () => {\n        dispatch(crearUsuario(null));\n    }\n\n    return(\n        <div>\n            <IconButton onClick={salir}>\n                <ExitToAppRounded />\n            </IconButton>\n            <h3>Home</h3>\n             <h4>{usuario}</h4>\n             <form onSubmit={send}>\n             <TextField \n                value={value} \n                onChange={e=>setValue(e.target.value)} \n                variant='outlined' \n                size='small'\n                focused={true}\n            />\n             <Button type='submit' variant='text' color='secondary' endIcon={<Send />}>enviar</Button>\n             </form>\n             <hr />\n             {\n                 mensajes.map((ms,id)=>{\n                     return(\n                         <section key={ms.usuario+'_'+id}>\n                             <b>{ms.usuario}</b>\n                            <p>{ms.message}</p>\n                         </section>\n                     );\n                 })\n             }\n        </div>\n\n\n    );\n}\n\nexport default HomeApp;","\nexport const agregarMensajes = value => {\n    console.log('mensajes => ',value);\n    return dispatch =>{\n        dispatch({\n            type:'MENSAJES_ADD',\n            value\n        })\n    }\n}\n\nexport const crearUsuario = value => {\n    return dispatch =>{\n        dispatch({\n            type:'USER_ADD',\n            value\n        })\n    }\n}","\nimport {ws} from '../../package.json';\n\nexport const IP_WS  = process.env.NODE_ENV ? ws.dev : ws.prod;\n// chat\nexport const WS_CHAT = () => new WebSocket(`${IP_WS}/ws/chat/`);\nexport const WS_CHAT_ROOM = (room,user) => new WebSocket(`${IP_WS}/ws/chat/${room}/${user}/`);\n// usuarios\nexport const WS_USUARIOS = () => new WebSocket(`${IP_WS}/ws/usuarios/`);\nexport const WS_USUARIOS_CHAT = name => new WebSocket(`${IP_WS}/ws/usuarios/${name}/`);","import { Button, makeStyles, TextField } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { crearUsuario } from '../actions';\n\nconst estyles = makeStyles(theme=>({\n    container:{\n        display:'flex',\n        justifyContent:'center'\n    },\n    form:{\n        width:300,\n        height:350\n    }\n}));\n\nconst RegistroApp = () => {\n    const [value,setValue] = useState('');\n    const dispatch = useDispatch();\n    const clases = estyles();\n\n    const agregar = e => {\n        dispatch(crearUsuario(value));\n        setValue('');\n        e.preventDefault();\n    }\n\n    return(\n        <div className={clases.container}>\n            <div className={clases.form}>\n                <h4>registro</h4>\n                <form onSubmit={agregar}>\n                    <TextField \n                        label='Nombre '\n                        value={value}\n                        onChange={e=>setValue(e.target.value)}\n                        variant='outlined'\n                        fullWidth\n                    />\n                    <Button \n                        fullWidth \n                        disabled={value===''} \n                        color='primary' \n                        variant='contained' \n                        onClick={agregar}\n                    >agregar</Button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default RegistroApp;","import React from 'react';\n\nconst SalaApp = () => {\n    return(\n        <div>\n            <h3>sala</h3>\n        </div>\n    )\n}\n\nexport default SalaApp;","import React, { useEffect } from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\n\nimport HomeApp from '../pages/home_app';\nimport RegistroApp from '../pages/registro_app';\nimport SalaApp from '../pages/sala_app';\n\n\nconst Routes = () => {\n    const {usuario=null} = useSelector(state => state)\n\n    useEffect(()=>initApp());\n\n    const initApp = () => {\n        console.log('rutas',usuario);\n    }\n\n    return(\n        <Router>\n            {usuario!==null ?\n            <Switch>\n                <Route path='/' component={HomeApp} exact/>\n                <Route path='/sala/:id' component={SalaApp} exact/>\n\n                <Route path='' component={()=><Redirect to='/' />} />\n            </Switch>:\n            <Switch>\n                <Route path='/registro' component={RegistroApp} exact/>\n                <Route path='' component={()=><Redirect to='/registro' />} />\n            </Switch>}\n        </Router>\n    );\n}\n\nexport default Routes;\n","import React from 'react';\nimport Routes from './routes';\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const initialMensajes = [];\n\nexport default (state=initialMensajes,action)=> {\n    switch (action.type) {\n        case 'MENSAJES_ADD':\n            return action.value;\n        default:\n            return state;\n    }\n}","\nexport const initialSalas = [];\n\nexport default  (state=initialSalas,action) => {\n    switch (action.type) {\n        case \"SALAS_ADD\":\n            return action.value;\n        default:\n            return state;\n    }\n}\n","\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport mensajes,{initialMensajes} from './reducer/mensajes';\nimport salas, { initialSalas } from './reducer/salas';\nimport usuario, { initialUsuario } from './reducer/usuario';\n\nconst reducers = combineReducers({\n    mensajes:mensajes,\n    salas:salas,\n    usuario:usuario,\n});\n\nexport default createStore(\n    reducers,\n    {\n        mensajes:initialMensajes,\n        salas:initialSalas,\n        usuario:initialUsuario,\n    },\n    applyMiddleware(thunk)\n);\n","\nexport const initialUsuario =null \n\nexport default (state=initialUsuario,action) => {\n    switch (action.type) {\n        case \"USER_ADD\":\n            localStorage.setItem('chat_user',action.value);\n            return action.value;\n        case \"USER_REMOVE\":\n            localStorage.removeItem('chat_user');\n            return action.value;\n        default:\n            const data = localStorage.getItem('chat_user');\n            console.log(data)\n            const user = data !== \"null\" ? data : null;\n            return state || user;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}