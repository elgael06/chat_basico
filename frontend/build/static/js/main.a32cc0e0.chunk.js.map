{"version":3,"sources":["pages/home_app.js","pages/sala_app.js","actions/index.js","controllers/index.js","components/crear_sala.js","pages/registro_app.js","routes/index.js","App.js","serviceWorker.js","reducer/mensajes.js","reducer/salas.js","store.js","reducer/usuario.js","index.js"],"names":["chat","salas","agregarMensajes","value","console","log","dispatch","type","crearUsuario","IP_WS","ws","dev","CrearSala","event","e","useState","setValue","enviar","preventDefault","onSubmit","TextField","onChange","target","label","size","variant","Button","onClick","disabled","HomeApp","useSelector","state","mensajes","usuario","useDispatch","listaSala","setSalas","history","useHistory","useEffect","initApp","iniciarRoom","iniciarSalas","close","room","user","WebSocket","onopen","onmessage","datos","JSON","parse","data","onclose","onerror","err","IconButton","ExitToAppRounded","sala","send","stringify","List","map","s","ListItem","key","pk","button","push","ListItemText","primary","nombre","secondary","creador","fecha","ListItemSecondaryAction","Send","message","focused","color","endIcon","ms","id","estyles","makeStyles","theme","container","display","justifyContent","form","width","height","RegistroApp","clases","agregar","className","fullWidth","SalaApp","useParams","serie","setSerie","WS_SALAS_ID","style","position","to","startIcon","ArrowBack","marginTop","overflow","msj","text","date","People","Divider","mensaje","InputProps","startAdornment","InputAdornment","Routes","path","component","exact","App","Boolean","window","location","hostname","match","initialMensajes","initialSalas","reducers","combineReducers","action","localStorage","setItem","removeItem","getItem","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a32cc0e0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { agregarMensajes, crearUsuario } from '../actions';\nimport { WS_CHAT_ROOM, WS_SALAS } from '../controllers';\nimport { Button, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, TextField } from '@material-ui/core';\nimport {  ExitToAppRounded, Send } from '@material-ui/icons';\nimport CrearSala from '../components/crear_sala';\nimport { useHistory} from 'react-router-dom';\n\n\nlet chat;\nlet salas;\n\nconst HomeApp = () => {\n    const { mensajes=[],usuario=null } = useSelector(state => state);\n    const dispatch = useDispatch();\n    const [value,setValue] = useState('');\n    const [listaSala,setSalas] = useState([]);\n    const history = useHistory();\n\n    //eslint-disable-next-line\n    useEffect(()=>initApp(),[]);\n\n    const initApp = () => {\n        iniciarRoom();\n        iniciarSalas();\n        return ()=>{\n            chat.close();\n            salas.close();\n        }\n    }\n\n    const iniciarRoom = () =>{\n        chat = WS_CHAT_ROOM('home',usuario);\n        chat.onopen = ()=>{\n            console.log('conectado...');\n        }\n        chat.onmessage = e => {\n            const datos = JSON.parse( e.data);\n            console.log(mensajes,datos);\n            dispatch(agregarMensajes([...datos.mensajes]));\n            setValue('');\n        };\n        chat.onclose = () => console.log('cerrar conexion...');\n        chat.onerror = err => console.log('error...',err);\n    }\n    const iniciarSalas = () => {\n        salas = WS_SALAS();\n        salas.onopen = ()=>{\n            console.log('conectado...');\n        }\n        salas.onmessage = e => {\n            const datos = JSON.parse( e.data);\n            console.log(datos);\n            setSalas(datos.salas);\n        };\n        salas.onclose = () => console.log('cerrar conexion...');\n        salas.onerror = err => console.log('error...',err);\n    }\n\n    const send = e =>{\n        chat.send(JSON.stringify({message:value,user:usuario}));\n        e.preventDefault();\n    }\n\n    const enviarSala = sala => {\n        salas.send(JSON.stringify({\n            sala:sala,\n            usuario:usuario\n        }));\n    }\n\n    const salir = () => {\n        dispatch(crearUsuario(null));\n    }\n\n    return(\n        <div>\n            <IconButton onClick={salir}>\n                <ExitToAppRounded />\n            </IconButton>\n            <div>\n               <b>Salas</b>\n               <hr />\n               <CrearSala\n                event={enviarSala}\n               />\n                <List >\n                {\n                    listaSala.map(s=>\n                        <ListItem \n                            key={s.pk} \n                            button \n                            onClick={()=>history.push(`/sala/${s.pk}`)}\n                        >\n                            <ListItemText \n                                primary={s.nombre}\n                                secondary={`${s.creador} - ${s.fecha}`}\n                            />\n                            <ListItemSecondaryAction >\n                                <Send />\n                            </ListItemSecondaryAction>\n                        </ListItem>)\n                }\n                </List>\n            </div>\n            <h3>Home</h3>\n            \n             <h4>{usuario}</h4>\n             <form onSubmit={send}>\n             <TextField \n                value={value} \n                onChange={e=>setValue(e.target.value)} \n                variant='outlined' \n                size='small'\n                focused={true}\n            />\n             <Button type='submit' variant='text' disabled={!value} color='secondary' endIcon={<Send />}>enviar</Button>\n             </form>\n             <hr />\n             {\n                 mensajes.map((ms,id)=>{\n                     return(\n                         <section key={ms.usuario+'_'+id}>\n                             <b>{ms.usuario}</b>\n                            <p>{ms.message}</p>\n                         </section>\n                     );\n                 })\n             }\n        </div>\n    );\n}\n\nexport default HomeApp;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { agregarMensajes } from '../actions';\nimport { WS_SALAS_ID } from '../controllers';\nimport {Link, useParams} from 'react-router-dom';\nimport { Button, Divider, InputAdornment, List, ListItem, ListItemSecondaryAction, ListItemText, TextField } from '@material-ui/core';\nimport { ArrowBack, People, Send } from '@material-ui/icons';\n\n\nlet chat;\nconst SalaApp = () => {\n    const { mensajes=[],usuario=null } = useSelector(state => state);\n    const dispatch = useDispatch();\n    const { id } = useParams();\n    const [value,setValue] = useState('');\n    const [serie,setSerie] = useState({});\n\n    //eslint-disable-next-line\n    useEffect(()=>initApp(),[]);\n\n    const initApp = () => {\n        console.log('sala ',id)\n        iniciarRoom();\n        return ()=>{\n            chat.close();\n            dispatch(agregarMensajes([]));\n        }\n    }\n\n    const iniciarRoom = () =>{\n        chat = WS_SALAS_ID(id);\n        chat.onopen = ()=>{\n            console.log('conectado...');\n        }\n        chat.onmessage = e => {\n            const {sala,mensajes} = JSON.parse( e.data);\n            console.log(mensajes,sala,mensajes);\n            setSerie(sala);\n            dispatch(agregarMensajes([...mensajes]));\n        };\n        chat.onclose = () => console.log('cerrar conexion...');\n        chat.onerror = err => console.log('error...',err);\n    }\n\n    const send = e => {\n        chat.send(JSON.stringify({\n            sala:id,\n            usuario:usuario,\n            mensaje:value\n        }));\n        console.log('enviar',value);\n        setValue('')\n        e.preventDefault();\n    }\n\n    return(\n        <div style={{height:'90%',width:'calc(100% - 40px)',position:'absolute'}}>\n\n            <Link to='/'>\n                <Button variant='text' color='primary'  startIcon={<ArrowBack />}>\n                    salir {usuario}\n                </Button>\n            </Link>\n            <h3>sala : {serie.nombre}</h3>\n            <b>Creada: {serie.fecha + ' por :' + serie.creador}</b>\n            <hr />\n\n            <List style={{\n                height:'calc(100% - 200px)',\n                width:'calc(100% - 5px)',\n                marginTop:20,\n                overflow:'auto'\n            }}>\n                {\n                    mensajes.map(msj=>{\n                        return<>\n                        <ListItem key={msj.pk}>\n                            <ListItemText \n                                primary={msj.text}\n                                secondary={`${msj.usuario} - ${msj.date} ` }\n                            />\n                        </ListItem>\n                            <ListItemSecondaryAction>\n                                {usuario === msj.usuario && <People />}\n                            </ListItemSecondaryAction>\n                        <Divider />\n                        </>\n                    })\n                }\n            </List>\n            <hr />\n            <form onSubmit={send}>\n                <br/>\n                <TextField \n                    fullWidth\n                    color='primary'\n                    InputProps={{\n                        startAdornment:<InputAdornment position='start'><Send color='primary' /></InputAdornment>\n                    }}\n                    label='nuevo mensaje'\n                    size='small'\n                    variant='outlined'\n                    value={value}\n                    onChange={e=>setValue(e.target.value)}\n                />\n            </form>\n        </div>\n    )\n}\n\nexport default SalaApp;","\nexport const agregarMensajes = value => {\n    console.log('mensajes => ',value);\n    return dispatch =>{\n        dispatch({\n            type:'MENSAJES_ADD',\n            value\n        })\n    }\n}\n\nexport const crearUsuario = value => {\n    return dispatch =>{\n        dispatch({\n            type:'USER_ADD',\n            value\n        })\n    }\n}","\nimport {ws} from '../../package.json';\n\nexport const IP_WS  = process.env.NODE_ENV ? ws.dev : ws.prod;\n// chat\nexport const WS_CHAT = () => new WebSocket(`${IP_WS}/ws/chat/`);\nexport const WS_CHAT_ROOM = (room,user) => new WebSocket(`${IP_WS}/ws/chat/${room}/${user}/`);\n// salas\nexport const WS_SALAS = () => new WebSocket(`${IP_WS}/ws/salas/`);\nexport const WS_SALAS_ID = id => new WebSocket(`${IP_WS}/ws/sala/${id}/`);\n// usuarios\nexport const WS_USUARIOS = () => new WebSocket(`${IP_WS}/ws/usuarios/`);\nexport const WS_USUARIOS_CHAT = name => new WebSocket(`${IP_WS}/ws/usuarios/${name}/`);","import React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\n\nconst CrearSala = ({\n    event=e=>e\n}) => {\n    const [value,setValue] = useState('');\n\n    const enviar = e => {\n        e.preventDefault();\n        event(value);\n        setValue('');\n    }\n   \n   return(<form onSubmit={enviar}>\n    <TextField \n        value={value}\n        onChange={e=>setValue(e.target.value)}\n        label='Nueva sala'\n        size='small'\n        variant='outlined' \n    />\n    <Button onClick={enviar} disabled={!value}>\n        crear\n    </Button>\n</form>);\n}\nexport default CrearSala;","import { Button, makeStyles, TextField } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { crearUsuario } from '../actions';\n\nconst estyles = makeStyles(theme=>({\n    container:{\n        display:'flex',\n        justifyContent:'center'\n    },\n    form:{\n        width:300,\n        height:350\n    }\n}));\n\nconst RegistroApp = () => {\n    const [value,setValue] = useState('');\n    const dispatch = useDispatch();\n    const clases = estyles();\n\n    const agregar = e => {\n        dispatch(crearUsuario(value));\n        setValue('');\n        e.preventDefault();\n    }\n\n    return(\n        <div className={clases.container}>\n            <div className={clases.form}>\n                <h4>registro</h4>\n                <form onSubmit={agregar}>\n                    <TextField \n                        label='Nombre '\n                        value={value}\n                        onChange={e=>setValue(e.target.value)}\n                        variant='outlined'\n                        fullWidth\n                    />\n                    <Button \n                        fullWidth \n                        disabled={value===''} \n                        color='primary' \n                        variant='contained' \n                        onClick={agregar}\n                    >agregar</Button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default RegistroApp;","import React, { useEffect } from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\n\nimport HomeApp from '../pages/home_app';\nimport RegistroApp from '../pages/registro_app';\nimport SalaApp from '../pages/sala_app';\n\n\nconst Routes = () => {\n    const {usuario=null} = useSelector(state => state)\n\n    useEffect(()=>initApp());\n\n    const initApp = () => {\n        console.log('rutas',usuario);\n    }\n\n    return(\n        <Router>\n            {usuario!==null ?\n            <Switch>\n                <Route path='/' component={HomeApp} exact/>\n                <Route path='/sala/:id' component={SalaApp} exact/>\n\n                <Route path='' component={()=><Redirect to='/' />} />\n            </Switch>:\n            <Switch>\n                <Route path='/registro' component={RegistroApp} exact/>\n                <Route path='' component={()=><Redirect to='/registro' />} />\n            </Switch>}\n        </Router>\n    );\n}\n\nexport default Routes;\n","import React from 'react';\nimport Routes from './routes';\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const initialMensajes = [];\n\nexport default (state=initialMensajes,action)=> {\n    switch (action.type) {\n        case 'MENSAJES_ADD':\n            return action.value;\n        default:\n            return state;\n    }\n}","\nexport const initialSalas = [];\n\nexport default  (state=initialSalas,action) => {\n    switch (action.type) {\n        case \"SALAS_ADD\":\n            return action.value;\n        default:\n            return state;\n    }\n}\n","\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport mensajes,{initialMensajes} from './reducer/mensajes';\nimport salas, { initialSalas } from './reducer/salas';\nimport usuario, { initialUsuario } from './reducer/usuario';\n\nconst reducers = combineReducers({\n    mensajes:mensajes,\n    salas:salas,\n    usuario:usuario,\n});\n\nexport default createStore(\n    reducers,\n    {\n        mensajes:initialMensajes,\n        salas:initialSalas,\n        usuario:initialUsuario,\n    },\n    applyMiddleware(thunk)\n);\n","\nexport const initialUsuario =null \n\nexport default (state=initialUsuario,action) => {\n    switch (action.type) {\n        case \"USER_ADD\":\n            localStorage.setItem('chat_user',action.value);\n            return action.value;\n        case \"USER_REMOVE\":\n            localStorage.removeItem('chat_user');\n            return action.value;\n        default:\n            const data = localStorage.getItem('chat_user');\n            console.log(data)\n            const user = data !== \"null\" ? data : null;\n            return state || user;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}